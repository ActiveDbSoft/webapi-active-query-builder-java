/**
 * QueryBuilderApi
 * Active Query Builder Web API lets create, analyze and modify SQL queries for different database servers using RESTful HTTP requests to a cloud-based service. It requires SQL execution context (information about database schema and used database server) to be stored under the registered account at https://webapi.activequerybuilder.com/.
 *
 * OpenAPI spec version: 1.1.3
 * Contact: support@activedbsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package webapi.activequerybuilder.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * Returns transformed SQL text in case of successful transformation. Otherwise returns error message.
 */
@ApiModel(description = "Returns transformed SQL text in case of successful transformation. Otherwise returns error message.")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-08-22T16:57:14.000+06:00")
public class TransformResult   {
  @JsonProperty("sql")
  private String sql = null;

  @JsonProperty("totals")
  private String totals = null;

  @JsonProperty("error")
  private String error = null;

  public TransformResult sql(String sql) {
    this.sql = sql;
    return this;
  }

   /**
   * Transformed SQL text.
   * @return sql
  **/
  @ApiModelProperty(example = "null", value = "Transformed SQL text.")
  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }

  public TransformResult totals(String totals) {
    this.totals = totals;
    return this;
  }

   /**
   * Transformed SQL text for totals.
   * @return totals
  **/
  @ApiModelProperty(example = "null", value = "Transformed SQL text for totals.")
  public String getTotals() {
    return totals;
  }

  public void setTotals(String totals) {
    this.totals = totals;
  }

  public TransformResult error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Error message text.
   * @return error
  **/
  @ApiModelProperty(example = "null", value = "Error message text.")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransformResult transformResult = (TransformResult) o;
    return Objects.equals(this.sql, transformResult.sql) &&
        Objects.equals(this.totals, transformResult.totals) &&
        Objects.equals(this.error, transformResult.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sql, totals, error);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransformResult {\n");
    
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    totals: ").append(toIndentedString(totals)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

